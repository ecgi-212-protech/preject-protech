#include <vector>
#include <iostream>
#include <conio.h> //By Foxefde
#include <windows.h>
#include <ctime>

using namespace std;



class Pic{

private:
    int x,z,Dollars,y,Bonus,time,score;
    // x - snake head position
    // z = for random number(pineapple generation)
    // y = tail coordinates time = time tail = snakelenght - 1
    char *map; //Map of game
    bool L,R,D,U,A; //L = LEFT R = RIGHT D = DOWN U = UP A = JUST A BOOL
    std::vector <int> past; //Special vector for deleting old parts

public:
    Snake()
    {
        map = new char [2000];
        L = 0;
        R = 1; //bool 1 = true bool 0 = false
        D = 0;
        U = 0;
        A = 0;
        score = 1; //Actually it will not have a tail until it eats first apple
        x = 1000; //Position of snake at the beggining
        Dollars = 0; //Money
        Bonus = 0;
        time = 40; //For bonus apples
        z = 1; //So first apple generation will not be bugged --
	}


    ~Snake()
    {
        delete [] map;
    }


*****************************************************************
    void Graphics (); //Drawing game
        void Snake::Graphics()
{
    sp(697); //CHoosing color
    std::cout << Dollars + Bonus << " Dollars By Foxefde 2013 ";
    std::cout << "\n";
    s();
    for(int u = 0;u < 50;u++) //Top border
    {
        sp(750);
        std::cout << char(219);
        s();
    }

	std::cout <<     std::endl;
/***********************************************************************/
    for(int x1 = 0;x1 < 2000 ; x1++) //DRAWING BOARD!~
    {
        if(x1 % 50 == 0 && x1 != 0)
        {
            std::cout <<     std::endl;
        }
        if(x1 % 50 == 0 || (x1-(x1 / 50)) % 49 == 0)
		{
            map[x1] = char(219);
            sp(750);
            std::cout << map[x1];
            s();
		}
	else if(map[x1]!=char(219) && map[x1]!=map[z])
    {
        std::cout << map[x1];
    }
    else if(x1 == z)
    {
        sp(10);
        std::cout << map[x1];
        s();
    }
    else
    {
        sp(750);
        std::cout << map[x1];
        s();
	}

    }

	std::cout <<     std::endl; //New line
/***********************************************************************/
    for(int u = 0;u < 50;u++) //Bottom border
    {
        sp(750);
        std::cout << char(219);
        s();
    }
    if(U == 1 || D == 1)
	{ //WITHOUT IT ,GOING UP/DOWN IS MUCH FASTER THAN < >
        Sleep(19);
    }
    if(map[z] == char(5)) //If apple is bonus ,then start decreasing time to get it!
    {
        time--;
        if(time == 0) //If you were too slow ,you lose a dollar and a new apple is generated
		{
            Dollars++;
            time = 40;
            Pineapple();
        }
    }

    clearscreen();
    GameLogic();
}


*********************************************
    void GameLogic(); //Does it need comment?
    void KEYBOARD (); //Checking for input
*********************************************

    void Pineapple(); //Generating new apple
            void Snake::Pineapple()
    {
            map[z] = ' ';
            if(Dollars % 8 != 0 || Dollars == 0)
            //Bonus apple - every 8 normal apples eaten ,so we need to check - generate an apple or a bonus apple
    {
            while(map[z] != ' ' && z % 50 != 0 && (z-(z/50)) % 49!= 0);
            //Keep generating new coordinates of pineapple until that place is empty
            {
                z = rand()%2000 + 1;
            }
                map[z] = char(229);
        //(z(z/50)) % 49 != 0 that means ,if z isn't 49+50n (49,99,149,199...)
    } //Logic ftw ,yeh?:D

            else //BONUS APPLE
            {
                while(map[z] != ' ' && z % 50 != 0 && (z-(z/50)) % 49 != 0);
                //Keep generating new coordinates of pineapple until that place is empty
                {
                    z = rand()%2000 + 1;
                }
                    map[z] = char(5);
    }

    }

**************************************************

    int GameOver (); //Game over ?.
            int Snake::GameOver()
        {
            Sleep(2500);
            system("cls");
            std::cout <<     std::endl << "Oops...You earned " << Dollars + Bonus << " Dollars...";
            //Better luck next time.
            Sleep(1800);
            return 0;
        }

************************************************

    void Start(); //Start -_-
            void Snake::Start()
        {
            for(int p = 0;p < 2000;p++)//////////////////////////////////////// Making array empty
            {
                map[p] = ' ';
            }
            map[ x ] = char(219); //Let's make head - block
            Pineapple(); //Let's generate a pineapple
            Graphics(); //GOOOOOOO
        }

********************************************************

    friend void clearscreen(); //It's actually not like system("cls"),but works almost same
        void clearscreen()
        {
            HANDLE hOut;
            COORD Position;

            hOut = GetStdHandle(STD_OUTPUT_HANDLE);

            Position.X = 0;
            Position.Y = 0;
            SetConsoleCursorPosition(hOut, Position);
        }

****************************************************************

    friend void sp();//Choose color function
        void sp(int choosecolor)
        {
            SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), choosecolor); //FUNCTION OF COLOR
        }

*****************************************************************************

    friend void s(); //Forget choose color choice
        void s()
        {
            SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 7);
            //FUNCTION TO ..EHM FORGET COLOR,not sure how to say I know: Stop using color
        }

    };
********************************************************************************


int main()
{
    srand((unsigned)time(0)); //So random numbers will be always random.
    Snake SNAKE; //creating class m
    SNAKE.Start(); //Starting main function/
}
